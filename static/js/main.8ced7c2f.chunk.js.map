{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","state","error","isLoaded","questions","question","title","link","show","hasMore","getQuestions","fetch","then","res","json","result","setState","has_more","items","handleClose","handleShow","this","className","Fragment","dataLength","length","next","loader","Table","responsive","hover","map","item","i","key","onClick","owner","display_name","moment","unix","creation_date","utc","format","Spinner","animation","role","Modal","centered","onHide","backdrop","keyboard","Header","closeButton","Title","Body","href","rel","target","Footer","Button","variant","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"+UAsIeA,G,kNA9GbC,MAAe,CACbC,MAAO,KACPC,UAAU,EACVC,UAAW,GACXC,SAAU,CACRC,MAAO,GACPC,KAAM,IAERC,MAAM,EACNC,SAAS,G,EAOXC,aAAe,WACbC,MAAM,oIACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZb,UAAU,EACVM,QAASM,EAAOE,SAChBb,UAAU,GAAD,mBAAM,EAAKH,MAAMG,WAAjB,YAA+BW,EAAOG,aAGnD,SAAChB,GACC,EAAKc,SAAS,CACZb,UAAU,EACVD,c,EAMViB,YAAc,WACZ,EAAKH,SAAS,CACZR,MAAM,K,EAIVY,WAAa,SAACf,GACZ,EAAKW,SAAS,CACZR,MAAM,EACNH,c,kEAhCFgB,KAAKX,iB,+BAoCG,IAAD,SACmEW,KAAKpB,MAAvEE,EADD,EACCA,SAAUC,EADX,EACWA,UAAWK,EADtB,EACsBA,QAASD,EAD/B,EAC+BA,KAD/B,IACqCH,SAAYC,EADjD,EACiDA,MAAOC,EADxD,EACwDA,KAC/D,OACE,yBAAKe,UAAU,OACXnB,EAOA,kBAAC,IAAMoB,SAAP,KACE,kBAAC,IAAD,CACEC,WAAYpB,EAAUqB,OACtBC,KAAML,KAAKX,aACXD,QAASA,EACTkB,OAAQ,2CACR,kBAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,OAAK,GACrB,+BACE,4BACE,sCACA,qCACA,+CAGJ,+BAEI1B,EAAU2B,KAAI,SAACC,EAAWC,GAAZ,OAA2B,wBAAIX,UAAU,KAAKY,IAAKD,EAAGE,QAAS,kBAAM,EAAKf,WAAWY,KACjG,4BAAKA,EAAKI,MAAMC,cAChB,4BAAKL,EAAK1B,OACV,4BAAKgC,IAAOC,KAAKP,EAAKQ,eAAeC,MAAMC,OAAO,6BAzB9D,yBAAKpB,UAAU,kBACb,kBAACqB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMvB,UAAU,WAAhB,gBA+BN,kBAACwB,EAAA,EAAD,CACEC,UAAQ,EACRvC,KAAMA,EACNwC,OAAQ3B,KAAKF,YACb8B,SAAS,SACTC,UAAU,GACV,kBAACJ,EAAA,EAAMK,OAAP,CAAcC,aAAW,GACvB,kBAACN,EAAA,EAAMO,MAAP,kBAEF,kBAACP,EAAA,EAAMQ,KAAP,KACGhD,EACD,uBAAGgB,UAAU,QAAO,uBAAGiC,KAAMhD,EAAMiD,IAAI,sBAAsBC,OAAO,UAAhD,yBAEtB,kBAACX,EAAA,EAAMY,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYzB,QAASd,KAAKF,aAA1C,gB,GAvGM0C,cCVEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAA1E,GACL2E,QAAQ3E,MAAMA,EAAM4E,c","file":"static/js/main.8ced7c2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Spinner, Table, Modal, Button } from 'react-bootstrap';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport moment from 'moment';\nimport './App.css';\n\ninterface Props { }\n\ninterface State {\n  error: any,\n  isLoaded: boolean,\n  questions: any,\n  question: Question,\n  show: boolean,\n  hasMore: boolean\n};\n\ninterface Question {\n  title: string,\n  link: string\n}\n\nclass App extends Component<Props, State>  {\n\n  state: State = {\n    error: null,\n    isLoaded: false,\n    questions: [],\n    question: {\n      title: '',\n      link: ''\n    },\n    show: false,\n    hasMore: true,\n  };\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    fetch(`https://api.stackexchange.com/2.2/questions?pagesize=20&order=desc&sort=activity&site=stackoverflow&key=U4DMV*8nvpm3EOpvf69Rxw((`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            hasMore: result.has_more,\n            questions: [...this.state.questions, ...result.items]\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  handleClose = () => {\n    this.setState({\n      show: false\n    })\n  }\n\n  handleShow = (question: Question) => {\n    this.setState({\n      show: true,\n      question\n    })\n  }\n\n  render() {\n    const { isLoaded, questions, hasMore, show, question: { title, link } } = this.state;\n    return (\n      <div className=\"App\">\n        {!isLoaded ?\n          <div className=\"spinner-loader\">\n            <Spinner animation=\"border\" role=\"status\">\n              <span className=\"sr-only\">Loading...</span>\n            </Spinner>\n          </div>\n          :\n          <React.Fragment>\n            <InfiniteScroll\n              dataLength={questions.length}\n              next={this.getQuestions}\n              hasMore={hasMore}\n              loader={<h4>Loading...</h4>}>\n              <Table responsive hover>\n                <thead>\n                  <tr>\n                    <th>Author</th>\n                    <th>Title</th>\n                    <th>Creation Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {\n                    questions.map((item: any, i: number) => (<tr className=\"cp\" key={i} onClick={() => this.handleShow(item)}>\n                      <td>{item.owner.display_name}</td>\n                      <td>{item.title}</td>\n                      <td>{moment.unix(item.creation_date).utc().format('DD/MM/YYYY HH:mm')}</td>\n                    </tr>))\n                  }\n                </tbody>\n              </Table>\n            </InfiniteScroll>\n          </React.Fragment>\n        }\n        <Modal\n          centered\n          show={show}\n          onHide={this.handleClose}\n          backdrop=\"static\"\n          keyboard={false}>\n          <Modal.Header closeButton>\n            <Modal.Title>Question</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {title}\n            <p className=\"mt-2\"><a href={link} rel=\"noopener noreferrer\" target=\"_blank\">Go to Question Page</a></p>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n          </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>);\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}